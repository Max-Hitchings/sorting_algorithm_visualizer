[{"D:\\Max\\Python\\React.js\\sorting_algorithm_visualizer\\src\\index.js":"1","D:\\Max\\Python\\React.js\\sorting_algorithm_visualizer\\src\\components\\js\\App.js":"2","D:\\Max\\Python\\React.js\\sorting_algorithm_visualizer\\src\\components\\js\\algorithm_visualizer.jsx":"3","D:\\Max\\Python\\React.js\\sorting_algorithm_visualizer\\src\\components\\js\\CreateArray.jsx":"4","D:\\Max\\Python\\React.js\\sorting_algorithm_visualizer\\src\\components\\js\\material-ui\\Slider.jsx":"5","D:\\Max\\Python\\React.js\\sorting_algorithm_visualizer\\src\\components\\js\\material-ui\\Button.jsx":"6","D:\\Max\\Python\\React.js\\sorting_algorithm_visualizer\\src\\components\\js\\algorithms\\BubbleSort.js":"7","D:\\Max\\Python\\React.js\\sorting_algorithm_visualizer\\src\\components\\js\\algorithms\\delay.js":"8","D:\\Max\\Python\\React.js\\sorting_algorithm_visualizer\\src\\components\\js\\algorithms\\SelectionSort.js":"9","D:\\Max\\Python\\React.js\\sorting_algorithm_visualizer\\src\\components\\js\\EndInfo.jsx":"10"},{"size":300,"mtime":1612736496302,"results":"11","hashOfConfig":"12"},{"size":262,"mtime":1612453937548,"results":"13","hashOfConfig":"12"},{"size":5914,"mtime":1612863448131,"results":"14","hashOfConfig":"12"},{"size":1222,"mtime":1612531625484,"results":"15","hashOfConfig":"12"},{"size":795,"mtime":1612453963914,"results":"16","hashOfConfig":"12"},{"size":331,"mtime":1612454330645,"results":"17","hashOfConfig":"12"},{"size":1448,"mtime":1612795010105,"results":"18","hashOfConfig":"12"},{"size":420,"mtime":1612531270145,"results":"19","hashOfConfig":"12"},{"size":1242,"mtime":1612794898565,"results":"20","hashOfConfig":"12"},{"size":923,"mtime":1612829500599,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"9zd3nu",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"24"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"D:\\Max\\Python\\React.js\\sorting_algorithm_visualizer\\src\\index.js",[],["44","45"],"D:\\Max\\Python\\React.js\\sorting_algorithm_visualizer\\src\\components\\js\\App.js",[],"D:\\Max\\Python\\React.js\\sorting_algorithm_visualizer\\src\\components\\js\\algorithm_visualizer.jsx",["46"],"import React, { useState, useEffect } from \"react\";\r\nimport CreateArray from \"./CreateArray.jsx\";\r\nimport \"../css/CreateArray.css\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport \"../css/algorithm_visualizer.css\";\r\nimport PrettoSlider from \"./material-ui/Slider\";\r\nimport ColorButton from \"./material-ui/Button\";\r\nimport BubbleSort from \"./algorithms/BubbleSort\";\r\nimport SelectionSort from \"./algorithms/SelectionSort\";\r\nimport EndInfo from \"./EndInfo\";\r\nimport ReactGa from \"react-ga\";\r\nimport BarChartIcon from \"@material-ui/icons/BarChart\";\r\n\r\n//this makes up the AlgorithmVisualizer component\r\nexport default function AlgorithmVisualizer() {\r\n  //useState means that if that variable ever changes it will re-render any component that uses that state variable\r\n  //all of the set... bellow are the function i will call to update the state variable\r\n  const [currentArray, setcurrentArray] = useState([]);\r\n  const [arrayLength, setarrayLength] = React.useState(25);\r\n  const [sliderTime, setsliderTime] = useState(true);\r\n  const [checkingList, setcheckingList] = useState([]);\r\n  const [wrongList, setwrongList] = useState([]);\r\n  const [isListSolved, setisListSolved] = useState(false);\r\n  const [solveSpeed, setsolveSpeed] = useState(500);\r\n  const [solvedList, setsolvedList] = useState([]);\r\n  const [pivot, setpivot] = useState([]);\r\n  const [checkCount, setcheckCount] = useState(0);\r\n\r\n  //useEffect takes a function and a list and whenever the variables in that list change the function will run\r\n  //will only run when the page runs becasue the 2nd parameter (the epmty list) will never change\r\n  useEffect(() => {\r\n    ReactGa.initialize(\"G-BQ530QZ667\");\r\n    ReactGa.pageview(\"/\");\r\n    GenerateArray();\r\n  }, []);\r\n\r\n  const GenerateArray = () => {\r\n    setisListSolved(false);\r\n    setsolvedList([]);\r\n    //will only make a new array if the antiSpamSlider funcion isnt running (if the sliderTime variable is false)\r\n    if (sliderTime) {\r\n      const Arraylen = arrayLength;\r\n      let numArray = [];\r\n      for (let i = 0; i < Arraylen; i++) {\r\n        //adds a new random number to the array\r\n        //should probably use .push here will update soon\r\n        numArray = [...numArray, Math.floor(Math.random() * Arraylen) + 1];\r\n      }\r\n      setcurrentArray(numArray);\r\n      if (sliderTime) {\r\n        setsliderTime(false);\r\n      }\r\n      return numArray;\r\n    }\r\n  };\r\n\r\n  //this make a timer that runs in the background so when you move the slider it doesent regenerate the array to many times\r\n  async function antiSliderSpam() {\r\n    setTimeout(() => {\r\n      setsliderTime(true);\r\n    }, 200);\r\n  }\r\n\r\n  const handleSliderChange = async (event, newValue) => {\r\n    await setarrayLength(newValue);\r\n    GenerateArray();\r\n    antiSliderSpam();\r\n  };\r\n\r\n  return (\r\n    <div id=\"algorithmVisuliser_container\" style={{ width: \"100%\" }}>\r\n      <div className=\"controlBar\">\r\n        <ColorButton\r\n          variant=\"contained\"\r\n          onClick={() => {\r\n            GenerateArray();\r\n            antiSliderSpam();\r\n          }}\r\n        >\r\n          Regenerate Current Array\r\n        </ColorButton>\r\n        <ColorButton\r\n          variant=\"contained\"\r\n          onClick={() => {\r\n            BubbleSort(\r\n              [...currentArray],\r\n              setisListSolved,\r\n              setcheckingList,\r\n              setcurrentArray,\r\n              solveSpeed,\r\n              setwrongList,\r\n              setcheckCount,\r\n              setsolvedList\r\n            );\r\n          }}\r\n          style={{ marginLeft: 10 }}\r\n          startIcon={<BarChartIcon />}\r\n        >\r\n          BubbleSort\r\n        </ColorButton>\r\n        <ColorButton\r\n          variant=\"contained\"\r\n          onClick={() => {\r\n            //console.log(currentArray);\r\n            SelectionSort(\r\n              [...currentArray],\r\n              setcheckingList,\r\n              setcurrentArray,\r\n              solveSpeed,\r\n              setsolvedList,\r\n              setpivot,\r\n              setcheckCount,\r\n              setisListSolved\r\n            );\r\n          }}\r\n          style={{ marginLeft: 10 }}\r\n          startIcon={<BarChartIcon />}\r\n        >\r\n          SelectionSort\r\n        </ColorButton>\r\n        <div style={{ display: \"flex\" }}>\r\n          <div>\r\n            <div\r\n              style={{\r\n                fontSize: 20,\r\n                fontWeight: 800,\r\n                color: \"#45A29E\",\r\n                fontFamily: \"Sriracha, cursive\",\r\n              }}\r\n            >\r\n              Array Size:\r\n            </div>\r\n            <PrettoSlider\r\n              className=\"topSlider\"\r\n              value={arrayLength}\r\n              onChange={handleSliderChange}\r\n              valueLabelDisplay=\"auto\"\r\n              aria-label=\"pretto slider\"\r\n              defaultValue={20}\r\n              min={5}\r\n              max={90}\r\n              style={{\r\n                width: 300,\r\n              }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <div className=\"sliderText\">Sort Speed:</div>\r\n            <PrettoSlider\r\n              className=\"topSlider\"\r\n              value={solveSpeed}\r\n              onChange={(event, newValue) => {\r\n                setsolveSpeed(newValue);\r\n              }}\r\n              valueLabelDisplay=\"auto\"\r\n              aria-label=\"pretto slider\"\r\n              min={1}\r\n              max={2000}\r\n              style={{\r\n                width: 300,\r\n                marginLeft: 20,\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"arrayContainer\">\r\n        <CreateArray\r\n          currentArray={currentArray}\r\n          checkingList={checkingList}\r\n          wrongList={wrongList}\r\n          isListSolved={isListSolved}\r\n          solvedList={solvedList}\r\n          pivot={pivot}\r\n          key={uuidv4()}\r\n        />\r\n      </div>\r\n      <EndInfo checkCount={checkCount} />\r\n    </div>\r\n  );\r\n}\r\n","D:\\Max\\Python\\React.js\\sorting_algorithm_visualizer\\src\\components\\js\\CreateArray.jsx",[],"D:\\Max\\Python\\React.js\\sorting_algorithm_visualizer\\src\\components\\js\\material-ui\\Slider.jsx",[],"D:\\Max\\Python\\React.js\\sorting_algorithm_visualizer\\src\\components\\js\\material-ui\\Button.jsx",[],"D:\\Max\\Python\\React.js\\sorting_algorithm_visualizer\\src\\components\\js\\algorithms\\BubbleSort.js",[],"D:\\Max\\Python\\React.js\\sorting_algorithm_visualizer\\src\\components\\js\\algorithms\\delay.js",[],"D:\\Max\\Python\\React.js\\sorting_algorithm_visualizer\\src\\components\\js\\algorithms\\SelectionSort.js",[],"D:\\Max\\Python\\React.js\\sorting_algorithm_visualizer\\src\\components\\js\\EndInfo.jsx",[],{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","severity":1,"message":"52","line":35,"column":6,"nodeType":"53","endLine":35,"endColumn":8,"suggestions":"54"},"no-native-reassign",["55"],"no-negated-in-lhs",["56"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'GenerateArray'. Either include it or remove the dependency array.","ArrayExpression",["57"],"no-global-assign","no-unsafe-negation",{"desc":"58","fix":"59"},"Update the dependencies array to be: [GenerateArray]",{"range":"60","text":"61"},[1725,1727],"[GenerateArray]"]