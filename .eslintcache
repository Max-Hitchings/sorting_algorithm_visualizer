[{"D:\\Max\\Python\\React.js\\sorting_algorithm_visualizer\\src\\index.js":"1","D:\\Max\\Python\\React.js\\sorting_algorithm_visualizer\\src\\components\\App.js":"2","D:\\Max\\Python\\React.js\\sorting_algorithm_visualizer\\src\\components\\algorithm_visualizer.jsx":"3","D:\\Max\\Python\\React.js\\sorting_algorithm_visualizer\\src\\components\\CreateArray.jsx":"4","D:\\Max\\Python\\React.js\\sorting_algorithm_visualizer\\src\\components\\material-ui\\Button.jsx":"5","D:\\Max\\Python\\React.js\\sorting_algorithm_visualizer\\src\\components\\material-ui\\Slider.jsx":"6","D:\\Max\\Python\\React.js\\sorting_algorithm_visualizer\\src\\components\\EndInfo.jsx":"7","D:\\Max\\Python\\React.js\\sorting_algorithm_visualizer\\src\\algorithms\\BubbleSort.js":"8","D:\\Max\\Python\\React.js\\sorting_algorithm_visualizer\\src\\functions\\delay.js":"9","D:\\Max\\Python\\React.js\\sorting_algorithm_visualizer\\src\\algorithms\\SelectionSort.js":"10","D:\\Max\\Python\\React.js\\sorting_algorithm_visualizer\\src\\functions\\abandon.js":"11","D:\\Max\\Python\\React.js\\sorting_algorithm_visualizer\\src\\components\\material-ui\\Switch.jsx":"12","D:\\Max\\Python\\React.js\\sorting_algorithm_visualizer\\src\\components\\algorithmInfo\\algorithmInfo.jsx":"13","D:\\Max\\Python\\React.js\\sorting_algorithm_visualizer\\src\\components\\algorithmInfo\\algorithmInfoColours.jsx":"14","D:\\Max\\Python\\React.js\\sorting_algorithm_visualizer\\src\\components\\algorithmInfo\\AlgorithmInfoBigO.jsx":"15","D:\\Max\\Python\\React.js\\sorting_algorithm_visualizer\\src\\components\\algorithmInfo\\algorithmData.js":"16"},{"size":297,"mtime":1613159090752,"results":"17","hashOfConfig":"18"},{"size":459,"mtime":1613433235748,"results":"19","hashOfConfig":"18"},{"size":8363,"mtime":1613515744361,"results":"20","hashOfConfig":"18"},{"size":1188,"mtime":1613433069168,"results":"21","hashOfConfig":"18"},{"size":331,"mtime":1612454330645,"results":"22","hashOfConfig":"18"},{"size":795,"mtime":1612453963914,"results":"23","hashOfConfig":"18"},{"size":887,"mtime":1613433094824,"results":"24","hashOfConfig":"18"},{"size":1771,"mtime":1613159506930,"results":"25","hashOfConfig":"18"},{"size":420,"mtime":1613158659201,"results":"26","hashOfConfig":"18"},{"size":1550,"mtime":1613159550840,"results":"27","hashOfConfig":"18"},{"size":176,"mtime":1613159455636,"results":"28","hashOfConfig":"18"},{"size":467,"mtime":1613358142368,"results":"29","hashOfConfig":"18"},{"size":1237,"mtime":1613516026268,"results":"30","hashOfConfig":"18"},{"size":487,"mtime":1613432569955,"results":"31","hashOfConfig":"18"},{"size":917,"mtime":1613521094837,"results":"32","hashOfConfig":"18"},{"size":1224,"mtime":1613521148498,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"lm9xus",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"36"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"36"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Max\\Python\\React.js\\sorting_algorithm_visualizer\\src\\index.js",[],["69","70"],"D:\\Max\\Python\\React.js\\sorting_algorithm_visualizer\\src\\components\\App.js",[],"D:\\Max\\Python\\React.js\\sorting_algorithm_visualizer\\src\\components\\algorithm_visualizer.jsx",["71","72","73"],"import React, { useState, useEffect, useRef } from \"react\";\r\nimport CreateArray from \"./CreateArray.jsx\";\r\n\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport PrettoSlider from \"./material-ui/Slider\";\r\nimport ColorButton from \"./material-ui/Button\";\r\nimport BubbleSort from \"../algorithms/BubbleSort\";\r\nimport SelectionSort from \"../algorithms/SelectionSort\";\r\nimport EndInfo from \"./EndInfo\";\r\nimport BarChartIcon from \"@material-ui/icons/BarChart\";\r\nimport algorithmData from \"./algorithmInfo/algorithmData\";\r\nimport InfoIcon from \"@material-ui/icons/Info\";\r\nimport AlgorithmInfo from \"./algorithmInfo/algorithmInfo.jsx\";\r\nimport Switch from \"@material-ui/core/Switch\";\r\nimport PurpleSwitch from \"./material-ui/Switch.jsx\";\r\n\r\n//tpauseds makes up the AlgorithmVisualizer component\r\nexport default function AlgorithmVisualizer() {\r\n  //useState means that if that variable ever changes it will re-render any component that uses that state variable\r\n  //all of the set... bellow are the function i will call to update the state variable\r\n  const [currentArray, setcurrentArray] = useState([]);\r\n  const [arrayLength, setarrayLength] = React.useState(25);\r\n  const [sliderTime, setsliderTime] = useState(true);\r\n  const [checkingList, setcheckingList] = useState([]);\r\n  const [wrongList, setwrongList] = useState([]);\r\n  const [isListSolved, setisListSolved] = useState(false);\r\n  const [solveSpeed, setsolveSpeed] = useState(500);\r\n  const [solvedList, setsolvedList] = useState([]);\r\n  const [pivot, setpivot] = useState([]);\r\n  const [checkCount, setcheckCount] = useState(0);\r\n  const [sortRunning, setsortRunning] = useState(false);\r\n  const [baseArray, setbaseArray] = useState([]);\r\n  const [darkTheme, setdarkTheme] = useState(true);\r\n  var paused = useRef(false);\r\n  //useEffect takes a function and a list and whenever the variables in that list change the function will run\r\n  //will only run when the page runs becasue the 2nd parameter (the epmty list) will never change\r\n  useEffect(() => {\r\n    GenerateArray(\"new\");\r\n  }, []);\r\n\r\n  const GenerateArray = (generateNew) => {\r\n    setisListSolved(false);\r\n    setsolvedList([]);\r\n    //will only make a new array if the antiSpamSlider funcion isnt running (if the sliderTime variable is false)\r\n    if (sliderTime) {\r\n      const Arraylen = arrayLength;\r\n      let numArray = [];\r\n      if (generateNew === \"new\") {\r\n        for (let i = 0; i < Arraylen; i++) {\r\n          //adds a new random number to the array\r\n          //should probably use .push here will update soon\r\n          numArray = [...numArray, Math.floor(Math.random() * Arraylen) + 1];\r\n        }\r\n      } else {\r\n        numArray = [...baseArray];\r\n      }\r\n      setcurrentArray(numArray);\r\n      setbaseArray(numArray);\r\n      if (sliderTime) {\r\n        setsliderTime(false);\r\n      }\r\n      return numArray;\r\n    }\r\n  };\r\n\r\n  //this make a timer that runs in the background so when you move the slider it doesent regenerate the array to many times\r\n  async function antiSliderSpam() {\r\n    setTimeout(() => {\r\n      setsliderTime(true);\r\n    }, 200);\r\n  }\r\n\r\n  const handleSliderChange = async (event, newValue) => {\r\n    await setarrayLength(newValue);\r\n    GenerateArray(\"new\");\r\n    antiSliderSpam();\r\n  };\r\n\r\n  //var darkTheme = true;\r\n  const themeChange = () => {\r\n    darkTheme\r\n      ? (document.body.style.backgroundColor = \"white\")\r\n      : (document.body.style.backgroundColor = \"#1f2833\");\r\n    setdarkTheme(!darkTheme);\r\n  };\r\n\r\n  return (\r\n    <div id=\"algorithmVisuliser_container\" style={{ width: \"100%\" }}>\r\n      <div className=\"controlBar\">\r\n        <div className=\"darkLightSwitch\">\r\n          <div className=\"darkLightSwitch-text\">THEME TOGGLE</div>\r\n          <div className=\"darkLightSwitch-switch\">\r\n            <PurpleSwitch\r\n              checked={darkTheme}\r\n              onChange={themeChange}\r\n              name=\"checkedA\"\r\n            />\r\n          </div>\r\n        </div>\r\n        <ColorButton\r\n          disabled={sortRunning}\r\n          variant=\"contained\"\r\n          onClick={() => {\r\n            GenerateArray(\"new\");\r\n            antiSliderSpam();\r\n          }}\r\n          className=\"floatLeft\"\r\n          style={{ marginRight: 10, marginTop: 5 }}\r\n        >\r\n          create new array\r\n        </ColorButton>\r\n        <ColorButton\r\n          disabled={sortRunning}\r\n          variant=\"contained\"\r\n          onClick={() => {\r\n            BubbleSort(\r\n              [...currentArray],\r\n              setisListSolved,\r\n              setcheckingList,\r\n              setcurrentArray,\r\n              solveSpeed,\r\n              setwrongList,\r\n              setcheckCount,\r\n              setsolvedList,\r\n              setsortRunning,\r\n              paused,\r\n              setpivot\r\n            );\r\n          }}\r\n          className=\"floatLeft\"\r\n          style={{ marginRight: 10, marginTop: 5 }}\r\n          startIcon={<BarChartIcon />}\r\n        >\r\n          Bubble Sort\r\n          <AlgorithmInfo algorithmData={algorithmData.BubbleSort} />\r\n        </ColorButton>\r\n        <ColorButton\r\n          disabled={sortRunning}\r\n          variant=\"contained\"\r\n          onClick={() => {\r\n            //console.log(currentArray);\r\n            SelectionSort(\r\n              [...currentArray],\r\n              setcheckingList,\r\n              setcurrentArray,\r\n              solveSpeed,\r\n              setsolvedList,\r\n              setpivot,\r\n              setcheckCount,\r\n              setisListSolved,\r\n              setsortRunning,\r\n              paused\r\n            );\r\n          }}\r\n          className=\"floatLeft\"\r\n          style={{ marginRight: 10, marginTop: 5 }}\r\n          startIcon={<BarChartIcon />}\r\n        >\r\n          Selection Sort\r\n          <AlgorithmInfo algorithmData={algorithmData.SelectionSort} />\r\n        </ColorButton>\r\n        <ColorButton\r\n          disabled={sortRunning}\r\n          variant=\"contained\"\r\n          onClick={() => {\r\n            GenerateArray(\"base\");\r\n            antiSliderSpam();\r\n          }}\r\n          className=\"floatLeft\"\r\n          style={{ marginRight: 10, marginTop: 5 }}\r\n        >\r\n          reset\r\n        </ColorButton>\r\n        <ColorButton\r\n          disabled={!sortRunning}\r\n          variant=\"contained\"\r\n          onClick={() => {\r\n            paused.current = !paused.current;\r\n          }}\r\n          className=\"floatLeft\"\r\n          style={{ marginRight: 10, marginTop: 5 }}\r\n        >\r\n          stop\r\n        </ColorButton>\r\n\r\n        <div\r\n          style={{ display: \"flex\", marginLeft: \"15px\" }}\r\n          className=\"floatLeft\"\r\n        >\r\n          <div>\r\n            <div\r\n              style={{\r\n                fontSize: 20,\r\n                fontWeight: 800,\r\n                color: \"#45A29E\",\r\n                fontFamily: \"Sriracha, cursive\",\r\n              }}\r\n            >\r\n              Array Size:\r\n            </div>\r\n            <PrettoSlider\r\n              disabled={sortRunning}\r\n              className=\"topSlider\"\r\n              value={arrayLength}\r\n              onChange={handleSliderChange}\r\n              valueLabelDisplay=\"auto\"\r\n              aria-label=\"pretto slider\"\r\n              defaultValue={20}\r\n              min={5}\r\n              max={90}\r\n              style={{\r\n                width: 300,\r\n              }}\r\n            />\r\n          </div>\r\n          <div className=\"floatLeft\">\r\n            <div className=\"sliderText\">Sort Speed:</div>\r\n            <PrettoSlider\r\n              disabled={sortRunning}\r\n              className=\"topSlider\"\r\n              value={solveSpeed}\r\n              onChange={(event, newValue) => {\r\n                setsolveSpeed(newValue);\r\n              }}\r\n              valueLabelDisplay=\"auto\"\r\n              aria-label=\"pretto slider\"\r\n              min={1}\r\n              max={2000}\r\n              style={{\r\n                width: 300,\r\n                marginLeft: 20,\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"arrayContainer\">\r\n        <CreateArray\r\n          currentArray={currentArray}\r\n          checkingList={checkingList}\r\n          wrongList={wrongList}\r\n          isListSolved={isListSolved}\r\n          solvedList={solvedList}\r\n          pivot={pivot}\r\n          key={uuidv4()}\r\n          baseArray={baseArray}\r\n        />\r\n      </div>\r\n      <EndInfo checkCount={checkCount} />\r\n    </div>\r\n  );\r\n}\r\n","D:\\Max\\Python\\React.js\\sorting_algorithm_visualizer\\src\\components\\CreateArray.jsx",[],"D:\\Max\\Python\\React.js\\sorting_algorithm_visualizer\\src\\components\\material-ui\\Button.jsx",[],"D:\\Max\\Python\\React.js\\sorting_algorithm_visualizer\\src\\components\\material-ui\\Slider.jsx",[],"D:\\Max\\Python\\React.js\\sorting_algorithm_visualizer\\src\\components\\EndInfo.jsx",[],"D:\\Max\\Python\\React.js\\sorting_algorithm_visualizer\\src\\algorithms\\BubbleSort.js",[],"D:\\Max\\Python\\React.js\\sorting_algorithm_visualizer\\src\\functions\\delay.js",[],"D:\\Max\\Python\\React.js\\sorting_algorithm_visualizer\\src\\algorithms\\SelectionSort.js",[],"D:\\Max\\Python\\React.js\\sorting_algorithm_visualizer\\src\\functions\\abandon.js",[],"D:\\Max\\Python\\React.js\\sorting_algorithm_visualizer\\src\\components\\material-ui\\Switch.jsx",["74","75"],"import React from \"react\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport { purple } from \"@material-ui/core/colors\";\r\nimport Switch from \"@material-ui/core/Switch\";\r\n\r\nconst PurpleSwitch = withStyles({\r\n  switchBase: {\r\n    color: \"#45A29E\",\r\n    \"&$checked\": {\r\n      color: \"#66FCF1\",\r\n    },\r\n    \"&$checked + $track\": {\r\n      backgroundColor: \"#45A29E\",\r\n    },\r\n  },\r\n  checked: {},\r\n  track: {},\r\n})(Switch);\r\n\r\nexport default PurpleSwitch;\r\n","D:\\Max\\Python\\React.js\\sorting_algorithm_visualizer\\src\\components\\algorithmInfo\\algorithmInfo.jsx",[],"D:\\Max\\Python\\React.js\\sorting_algorithm_visualizer\\src\\components\\algorithmInfo\\algorithmInfoColours.jsx",[],"D:\\Max\\Python\\React.js\\sorting_algorithm_visualizer\\src\\components\\algorithmInfo\\AlgorithmInfoBigO.jsx",[],"D:\\Max\\Python\\React.js\\sorting_algorithm_visualizer\\src\\components\\algorithmInfo\\algorithmData.js",[],{"ruleId":"76","replacedBy":"77"},{"ruleId":"78","replacedBy":"79"},{"ruleId":"80","severity":1,"message":"81","line":12,"column":8,"nodeType":"82","messageId":"83","endLine":12,"endColumn":16},{"ruleId":"80","severity":1,"message":"84","line":14,"column":8,"nodeType":"82","messageId":"83","endLine":14,"endColumn":14},{"ruleId":"85","severity":1,"message":"86","line":39,"column":6,"nodeType":"87","endLine":39,"endColumn":8,"suggestions":"88"},{"ruleId":"80","severity":1,"message":"89","line":1,"column":8,"nodeType":"82","messageId":"83","endLine":1,"endColumn":13},{"ruleId":"80","severity":1,"message":"90","line":3,"column":10,"nodeType":"82","messageId":"83","endLine":3,"endColumn":16},"no-native-reassign",["91"],"no-negated-in-lhs",["92"],"no-unused-vars","'InfoIcon' is defined but never used.","Identifier","unusedVar","'Switch' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'GenerateArray'. Either include it or remove the dependency array.","ArrayExpression",["93"],"'React' is defined but never used.","'purple' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"94","fix":"95"},"Update the dependencies array to be: [GenerateArray]",{"range":"96","text":"97"},[2033,2035],"[GenerateArray]"]